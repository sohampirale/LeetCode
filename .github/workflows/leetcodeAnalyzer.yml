name: LeetCode Analyzer

# 1. Trigger on all pushes (you can restrict to certain branches or paths if desired)
on:
  push:
    # branches:
    #   - main
    # paths:
    #   - 'solves/**'
    
jobs:
  analyze:
    name: Analyze LeetCode solves
    runs-on: ubuntu-latest
    env:
      # Your backend endpoint and token, stored as repo secrets
      BACKEND_URL: ${{ secrets.ANALYZER_ENDPOINT }}
      BACKEND_TOKEN: ${{ secrets.ANALYZER_TOKEN }}

    steps:
      # 2. Check out the full repository so we can diff commits
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 3. Compute list of changed files between the previous commit and this one
      - name: Determine changed files
        id: changes
        run: |
          echo "Fetching changed files between ${{ github.event.before }} and ${{ github.sha }}..."
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || true)
          echo "Changed files:"
          echo "$files"
          # Use the new GITHUB_OUTPUT method instead of the deprecated set-output
          echo "list=$files" >> $GITHUB_OUTPUT

      # 4. Skip if nothing changed
      - name: No changes? Skip
        if: steps.changes.outputs.list == ''
        run: echo "No files changed; nothing to analyze."

      # 5. Loop over each changed file and POST it to your backend
      - name: Send changed files to Analyzer
        if: steps.changes.outputs.list != ''
        run: |
          IFS=',' read -r -a files <<< "${{ steps.changes.outputs.list }}"
          
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "→ Sending $file to analyzer..."
              
              # Build metadata JSON
              metadata=$(jq -n \
                --arg path "$file" \
                --arg commit "${{ github.sha }}" \
                --arg repo "${{ github.repository }}" \
                '{
                  repository: $repo,
                  commit: $commit,
                  path: $path
                }'
              )
              
              # POST as multipart/form-data: metadata + file contents
              curl --fail --show-error --silent \
                -X POST "$BACKEND_URL" \
                -H "Authorization: Bearer $BACKEND_TOKEN" \
                -F metadata="$metadata;type=application/json" \
                -F code="@${file}" \
                || {
                  echo "Error: Failed to send $file"; exit 1;
                }
              
              echo "✔️  Sent $file"
            else
              echo "Skipping $file (not a regular file)"
            fi
          done

      # 6. (Optional) Commit or PR any feedback your backend returns
      # - name: Commit AI feedback
      #   if: ${{ always() }}
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git add feedback/
      #     git commit -m "chore: update AI feedback for ${{ github.sha }}" || echo "No feedback changes"
      #     git push
